{"version":3,"file":"index.cjs","sources":["../src/useWallet.ts"],"sourcesContent":["import { useCallback } from \"react\";\nimport { useImmer } from \"use-immer\";\nimport { assertWalletAddress, formatWalletAddress } from \"@wallet/libs\";\n\nexport type WalletStatus = \"idle\" | \"connected\" | \"error\";\n\nexport type WalletState = {\n  address?: string;\n  formattedAddress?: string;\n  balance: number;\n  status: WalletStatus;\n  error?: string;\n};\n\nexport type WalletActions = {\n  connect: (address: string) => void;\n  disconnect: () => void;\n  setBalance: (balance: number) => void;\n  fail: (message: string) => void;\n  formatAddress: (address?: string) => string;\n};\n\nexport type UseWalletReturn = {\n  state: WalletState;\n  actions: WalletActions;\n};\n\nconst createInitialState = (initialAddress?: string): WalletState => {\n  if (!initialAddress) {\n    return {\n      balance: 0,\n      status: \"idle\"\n    };\n  }\n\n  assertWalletAddress(initialAddress);\n\n  const normalized = initialAddress.trim();\n  return {\n    address: normalized,\n    formattedAddress: formatWalletAddress(normalized),\n    balance: 0,\n    status: \"connected\"\n  };\n};\n\n/**\n * useWallet centralises wallet state updates on top of Immer.\n * It is intentionally lightweight so the consumer can wire it to any wallet SDK.\n */\nexport function useWallet(initialAddress?: string): UseWalletReturn {\n  const [state, update] = useImmer<WalletState>(() => createInitialState(initialAddress));\n\n  const connect = useCallback(\n    (address: string) => {\n      update((draft) => {\n        try {\n          assertWalletAddress(address);\n          draft.address = address.trim();\n          draft.formattedAddress = formatWalletAddress(draft.address);\n          draft.status = \"connected\";\n          draft.error = undefined;\n        } catch (error) {\n          draft.status = \"error\";\n          draft.error = error instanceof Error ? error.message : \"Unable to connect.\";\n        }\n      });\n    },\n    [update]\n  );\n\n  const disconnect = useCallback(() => {\n    update((draft) => {\n      draft.address = undefined;\n      draft.formattedAddress = undefined;\n      draft.balance = 0;\n      draft.status = \"idle\";\n      draft.error = undefined;\n    });\n  }, [update]);\n\n  const setBalance = useCallback(\n    (balance: number) => {\n      update((draft) => {\n        draft.balance = balance;\n      });\n    },\n    [update]\n  );\n\n  const fail = useCallback(\n    (message: string) => {\n      update((draft) => {\n        draft.status = \"error\";\n        draft.error = message;\n      });\n    },\n    [update]\n  );\n\n  const formatAddress = useCallback(\n    (address?: string) => {\n      const input = address ?? state.address;\n      if (!input) {\n        return \"\";\n      }\n      return formatWalletAddress(input);\n    },\n    [state.address]\n  );\n\n  return {\n    state,\n    actions: {\n      connect,\n      disconnect,\n      setBalance,\n      fail,\n      formatAddress\n    }\n  };\n}\n"],"names":["initialAddress","_useImmer","useImmer","balance","status","assertWalletAddress","normalized","trim","address","formattedAddress","formatWalletAddress","createInitialState","state","update","connect","useCallback","draft","error","undefined","Error","message","disconnect","setBalance","fail","formatAddress","input","actions"],"mappings":"0FAkDgB,SAAUA,GACxB,IAAAC,EAAwBC,EAAAA,SAAsB,WAAA,OAxBrB,SAACF,GAC1B,IAAKA,EACH,MAAO,CACLG,QAAS,EACTC,OAAQ,QAIZC,EAAmBA,oBAACL,GAEpB,IAAMM,EAAaN,EAAeO,OAClC,MAAO,CACLC,QAASF,EACTG,iBAAkBC,EAAAA,oBAAoBJ,GACtCH,QAAS,EACTC,OAAQ,YAEZ,CAOsDO,CAAmBX,EAAe,GAA/EY,EAAKX,EAAA,GAAEY,EAAMZ,KAEda,EAAUC,EAAAA,YACd,SAACP,GACCK,EAAO,SAACG,GACN,IACEX,EAAmBA,oBAACG,GACpBQ,EAAMR,QAAUA,EAAQD,OACxBS,EAAMP,iBAAmBC,EAAmBA,oBAACM,EAAMR,SACnDQ,EAAMZ,OAAS,YACfY,EAAMC,WAAQC,CAChB,CAAE,MAAOD,GACPD,EAAMZ,OAAS,QACfY,EAAMC,MAAQA,aAAiBE,MAAQF,EAAMG,QAAU,oBACzD,CACF,EACF,EACA,CAACP,IAGGQ,EAAaN,EAAWA,YAAC,WAC7BF,EAAO,SAACG,GACNA,EAAMR,aAAUU,EAChBF,EAAMP,sBAAmBS,EACzBF,EAAMb,QAAU,EAChBa,EAAMZ,OAAS,OACfY,EAAMC,WAAQC,CAChB,EACF,EAAG,CAACL,IAEES,EAAaP,cACjB,SAACZ,GACCU,EAAO,SAACG,GACNA,EAAMb,QAAUA,CAClB,EACF,EACA,CAACU,IAGGU,EAAOR,EAAAA,YACX,SAACK,GACCP,EAAO,SAACG,GACNA,EAAMZ,OAAS,QACfY,EAAMC,MAAQG,CAChB,EACF,EACA,CAACP,IAGGW,EAAgBT,EAAAA,YACpB,SAACP,GACC,IAAMiB,EAAe,MAAPjB,EAAAA,EAAWI,EAAMJ,QAC/B,OAAKiB,EAGEf,EAAmBA,oBAACe,GAFlB,EAGX,EACA,CAACb,EAAMJ,UAGT,MAAO,CACLI,MAAAA,EACAc,QAAS,CACPZ,QAAAA,EACAO,WAAAA,EACAC,WAAAA,EACAC,KAAAA,EACAC,cAAAA,GAGN"}